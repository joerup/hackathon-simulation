import { snapdragonConfig } from "../config.js";
import { generateDeterministicLuck } from "../utils/random.js";

export async function requestResumeStats(payload) {
  const { apiKey, apiUrl, model } = snapdragonConfig;

  if (!apiKey) {
    console.warn("LLM API key missing. Returning placeholder stats.");
    return createPlaceholderStats(payload);
  }

  // Check if we have extracted text
  if (!payload?.text || !payload.text.trim()) {
    return createErrorStats("❌ Text Extraction Failed: No readable text could be extracted from the uploaded resume. Please check if the file is corrupted or try a different format.", payload);
  }

  try {
    const response = await fetch(apiUrl, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${apiKey}`
      },
      body: JSON.stringify({
        model,
        messages: [
          {
            role: "System",
            content: "You are a resume analysis assistant. Create a concise, professional summary of the candidate based on their resume. Focus on key skills, experience, and qualifications. Keep it under 150 words."
          },
          {
            role: "User",
            content: `Please create a professional summary for this resume:\n\n${payload.text}`
          }
        ],
        stream: false
      })
    });

    if (!response.ok) {
      const errorDetail = await safeReadError(response);
      return createErrorStats(`❌ LLM API Failed (${response.status}): ${errorDetail}`, payload);
    }

    // Process the LLM response to get the professional summary
    const responseData = await response.json();
    const aiMessage = responseData?.choices?.[0]?.message;
    const generatedSummary = aiMessage?.content;

    if (!generatedSummary || !generatedSummary.trim()) {
      return createErrorStats("❌ LLM Response Error: No summary was generated by the AI service.", payload);
    }

    // Return stats with LLM-generated summary
    return createSuccessStats(generatedSummary, payload);
  } catch (error) {
    return createErrorStats(`❌ Network Error: Failed to connect to AI service. ${error.message}`, payload);
  }
}

function createPlaceholderStats(payload) {
  const summary = "⚠️ LLM API Key Missing: Cannot generate professional summary. Please configure your Snapdragon API key.";
  
  return {
    summary,
    experience: 0,
    networking: 0,
    energyScore: 50,
    fillerRatio: 0.4,
    luck: getLuckValue(payload),
    gpa: null,
    internships: 0,
    buzzwords: [],
    skills: []
  };
}

function createSuccessStats(summary, payload) {
  return {
    summary,
    // Mock arena stats - these would normally be parsed from resume content
    experience: 5,
    networking: 3,
    energyScore: 75,
    fillerRatio: 0.2,
    luck: getLuckValue(payload),
    gpa: null,
    internships: 1,
    buzzwords: ["AI", "Python"], // Mock buzzwords
    skills: [{ label: "Communication", count: 1 }] // Mock skills
  };
}

function createErrorStats(errorMessage, payload) {
  return {
    summary: errorMessage,
    experience: 0,
    networking: 0,
    energyScore: 0,
    fillerRatio: 1.0, // 100% filler indicates failure
    luck: getLuckValue(payload),
    gpa: null,
    internships: 0,
    buzzwords: [],
    skills: []
  };
}

function getLuckValue(payload) {
  // Generate consistent luck based on available data
  const seed = payload?.text || payload?.fileName || Date.now().toString();
  return generateDeterministicLuck(seed);
}

async function safeReadError(response) {
  try {
    const text = await response.text();
    return text.slice(0, 400) || "no response body";
  } catch (error) {
    return "unable to read error body";
  }
}
